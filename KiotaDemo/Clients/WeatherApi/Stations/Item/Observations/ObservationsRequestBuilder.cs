// <auto-generated/>
using KiotaDemo.Clients.WeatherApi.Models;
using KiotaDemo.Clients.WeatherApi.Stations.Item.Observations.Item;
using KiotaDemo.Clients.WeatherApi.Stations.Item.Observations.Latest;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace KiotaDemo.Clients.WeatherApi.Stations.Item.Observations
{
    /// <summary>
    /// Builds and executes requests for operations under \stations\{stationId}\observations
    /// </summary>
    public class ObservationsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The latest property</summary>
        public KiotaDemo.Clients.WeatherApi.Stations.Item.Observations.Latest.LatestRequestBuilder Latest
        {
            get => new KiotaDemo.Clients.WeatherApi.Stations.Item.Observations.Latest.LatestRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the KiotaDemo.Clients.WeatherApi.stations.item.observations.item collection</summary>
        /// <param name="position">Timestamp of requested observation</param>
        /// <returns>A <see cref="KiotaDemo.Clients.WeatherApi.Stations.Item.Observations.Item.WithTimeItemRequestBuilder"/></returns>
        public KiotaDemo.Clients.WeatherApi.Stations.Item.Observations.Item.WithTimeItemRequestBuilder this[DateTimeOffset position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("time", position);
                return new KiotaDemo.Clients.WeatherApi.Stations.Item.Observations.Item.WithTimeItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="KiotaDemo.Clients.WeatherApi.Stations.Item.Observations.ObservationsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ObservationsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/stations/{stationId}/observations{?end*,limit*,start*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="KiotaDemo.Clients.WeatherApi.Stations.Item.Observations.ObservationsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ObservationsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/stations/{stationId}/observations{?end*,limit*,start*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns a list of observations for a given station
        /// </summary>
        /// <returns>A <see cref="KiotaDemo.Clients.WeatherApi.Models.ObservationCollectionGeoJson"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="KiotaDemo.Clients.WeatherApi.Models.ProblemDetail">When receiving a 4XX or 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<KiotaDemo.Clients.WeatherApi.Models.ObservationCollectionGeoJson?> GetAsync(Action<RequestConfiguration<KiotaDemo.Clients.WeatherApi.Stations.Item.Observations.ObservationsRequestBuilder.ObservationsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<KiotaDemo.Clients.WeatherApi.Models.ObservationCollectionGeoJson> GetAsync(Action<RequestConfiguration<KiotaDemo.Clients.WeatherApi.Stations.Item.Observations.ObservationsRequestBuilder.ObservationsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "XXX", KiotaDemo.Clients.WeatherApi.Models.ProblemDetail.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<KiotaDemo.Clients.WeatherApi.Models.ObservationCollectionGeoJson>(requestInfo, KiotaDemo.Clients.WeatherApi.Models.ObservationCollectionGeoJson.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns a list of observations for a given station
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<KiotaDemo.Clients.WeatherApi.Stations.Item.Observations.ObservationsRequestBuilder.ObservationsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<KiotaDemo.Clients.WeatherApi.Stations.Item.Observations.ObservationsRequestBuilder.ObservationsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/geo+json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="KiotaDemo.Clients.WeatherApi.Stations.Item.Observations.ObservationsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public KiotaDemo.Clients.WeatherApi.Stations.Item.Observations.ObservationsRequestBuilder WithUrl(string rawUrl)
        {
            return new KiotaDemo.Clients.WeatherApi.Stations.Item.Observations.ObservationsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns a list of observations for a given station
        /// </summary>
        public class ObservationsRequestBuilderGetQueryParameters 
        {
            /// <summary>End time</summary>
            [QueryParameter("end")]
            public DateTimeOffset? End { get; set; }
            /// <summary>Limit</summary>
            [QueryParameter("limit")]
            public int? Limit { get; set; }
            /// <summary>Start time</summary>
            [QueryParameter("start")]
            public DateTimeOffset? Start { get; set; }
        }
    }
}
