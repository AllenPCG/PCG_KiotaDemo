// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace KiotaDemo.Clients.WeatherApi.Models
{
    /// <summary>
    /// A structured value representing a measurement and its unit of measure. This object is a slighly modified version of the schema.org definition at https://schema.org/QuantitativeValue
    /// </summary>
    public class QuantitativeValue : IParsable
    {
        /// <summary>The maximum value of a range of measured values</summary>
        public double? MaxValue { get; set; }
        /// <summary>The minimum value of a range of measured values</summary>
        public double? MinValue { get; set; }
        /// <summary>For values in observation records, the quality control flag from the MADIS system. The definitions of these flags can be found at https://madis.ncep.noaa.gov/madis_sfc_qc_notes.shtml</summary>
        public KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue_qualityControl? QualityControl { get; set; }
        /// <summary>A string denoting a unit of measure, expressed in the format &quot;{unit}&quot; or &quot;{namespace}:{unit}&quot;.Units with the namespace &quot;wmo&quot; or &quot;wmoUnit&quot; are defined in the World Meteorological Organization Codes Registry at http://codes.wmo.int/common/unit and should be canonically resolvable to http://codes.wmo.int/common/unit/{unit}.Units with the namespace &quot;nwsUnit&quot; are currently custom and do not align to any standard.Units with no namespace or the namespace &quot;uc&quot; are compliant with the Unified Code for Units of Measure syntax defined at https://unitsofmeasure.org/. This also aligns with recent versions of the Geographic Markup Language (GML) standard, the IWXXM standard, and OGC Observations and Measurements v2.0 (ISO/DIS 19156).Namespaced units are considered deprecated. We will be aligning API to use the same standards as GML/IWXXM in the future.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UnitCode { get; set; }
#nullable restore
#else
        public string UnitCode { get; set; }
#endif
        /// <summary>A measured value</summary>
        public double? Value { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "maxValue", n => { MaxValue = n.GetDoubleValue(); } },
                { "minValue", n => { MinValue = n.GetDoubleValue(); } },
                { "qualityControl", n => { QualityControl = n.GetEnumValue<KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue_qualityControl>(); } },
                { "unitCode", n => { UnitCode = n.GetStringValue(); } },
                { "value", n => { Value = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("maxValue", MaxValue);
            writer.WriteDoubleValue("minValue", MinValue);
            writer.WriteEnumValue<KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue_qualityControl>("qualityControl", QualityControl);
            writer.WriteStringValue("unitCode", UnitCode);
            writer.WriteDoubleValue("value", Value);
        }
    }
}
