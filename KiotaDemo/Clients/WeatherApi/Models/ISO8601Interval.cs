// <auto-generated/>
using Microsoft.Kiota.Abstractions;
using Microsoft.Kiota.Abstractions.Serialization;
namespace KiotaDemo.Clients.WeatherApi.Models
{
    /// <summary>
    /// Composed type wrapper for classes <see cref="string"/>
    /// </summary>
    public class ISO8601Interval : IComposedTypeWrapper, IParsable
    {
        /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ISO8601IntervalString { get; set; }
#nullable restore
#else
        public string ISO8601IntervalString { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ISO8601IntervalString0 { get; set; }
#nullable restore
#else
        public string ISO8601IntervalString0 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ISO8601IntervalString1 { get; set; }
#nullable restore
#else
        public string ISO8601IntervalString1 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? String { get; set; }
#nullable restore
#else
        public string String { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="KiotaDemo.Clients.WeatherApi.Models.ISO8601Interval"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static KiotaDemo.Clients.WeatherApi.Models.ISO8601Interval CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
            var result = new KiotaDemo.Clients.WeatherApi.Models.ISO8601Interval();
            if(parseNode.GetStringValue() is string iSO8601IntervalStringValue)
            {
                result.ISO8601IntervalString = iSO8601IntervalStringValue;
            }
            else if(parseNode.GetStringValue() is string iSO8601IntervalString0Value)
            {
                result.ISO8601IntervalString0 = iSO8601IntervalString0Value;
            }
            else if(parseNode.GetStringValue() is string iSO8601IntervalString1Value)
            {
                result.ISO8601IntervalString1 = iSO8601IntervalString1Value;
            }
            else if(parseNode.GetStringValue() is string stringValue)
            {
                result.String = stringValue;
            }
            return result;
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>();
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            if(ISO8601IntervalString != null)
            {
                writer.WriteStringValue(null, ISO8601IntervalString);
            }
            else if(ISO8601IntervalString0 != null)
            {
                writer.WriteStringValue(null, ISO8601IntervalString0);
            }
            else if(ISO8601IntervalString1 != null)
            {
                writer.WriteStringValue(null, ISO8601IntervalString1);
            }
            else if(String != null)
            {
                writer.WriteStringValue(null, String);
            }
        }
    }
}
