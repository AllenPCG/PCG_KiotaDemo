// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace KiotaDemo.Clients.WeatherApi.Models
{
    /// <summary>
    /// An object representing a decoded METAR phenomenon string.
    /// </summary>
    public class MetarPhenomenon : IParsable
    {
        /// <summary>The intensity property</summary>
        public KiotaDemo.Clients.WeatherApi.Models.MetarPhenomenon_intensity? Intensity { get; set; }
        /// <summary>The inVicinity property</summary>
        public bool? InVicinity { get; set; }
        /// <summary>The modifier property</summary>
        public KiotaDemo.Clients.WeatherApi.Models.MetarPhenomenon_modifier? Modifier { get; set; }
        /// <summary>The rawString property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RawString { get; set; }
#nullable restore
#else
        public string RawString { get; set; }
#endif
        /// <summary>The weather property</summary>
        public KiotaDemo.Clients.WeatherApi.Models.MetarPhenomenon_weather? Weather { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="KiotaDemo.Clients.WeatherApi.Models.MetarPhenomenon"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static KiotaDemo.Clients.WeatherApi.Models.MetarPhenomenon CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new KiotaDemo.Clients.WeatherApi.Models.MetarPhenomenon();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "inVicinity", n => { InVicinity = n.GetBoolValue(); } },
                { "intensity", n => { Intensity = n.GetEnumValue<KiotaDemo.Clients.WeatherApi.Models.MetarPhenomenon_intensity>(); } },
                { "modifier", n => { Modifier = n.GetEnumValue<KiotaDemo.Clients.WeatherApi.Models.MetarPhenomenon_modifier>(); } },
                { "rawString", n => { RawString = n.GetStringValue(); } },
                { "weather", n => { Weather = n.GetEnumValue<KiotaDemo.Clients.WeatherApi.Models.MetarPhenomenon_weather>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<KiotaDemo.Clients.WeatherApi.Models.MetarPhenomenon_intensity>("intensity", Intensity);
            writer.WriteBoolValue("inVicinity", InVicinity);
            writer.WriteEnumValue<KiotaDemo.Clients.WeatherApi.Models.MetarPhenomenon_modifier>("modifier", Modifier);
            writer.WriteStringValue("rawString", RawString);
            writer.WriteEnumValue<KiotaDemo.Clients.WeatherApi.Models.MetarPhenomenon_weather>("weather", Weather);
        }
    }
}
