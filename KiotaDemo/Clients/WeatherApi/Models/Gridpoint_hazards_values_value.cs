// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace KiotaDemo.Clients.WeatherApi.Models
{
    /// <summary>
    /// A value object representing an expected hazard.
    /// </summary>
    public class Gridpoint_hazards_values_value : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Event number. If this hazard refers to a national or regional center product (such as a Storm Prediction Center convective watch), this value will be the sequence number of that product.</summary>
        public int? EventNumber { get; set; }
        /// <summary>Hazard code. This value will correspond to a P-VTEC phenomenon code as defined in NWS Directive 10-1703.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Phenomenon { get; set; }
#nullable restore
#else
        public string Phenomenon { get; set; }
#endif
        /// <summary>Significance code. This value will correspond to a P-VTEC significance code as defined in NWS Directive 10-1703.This will most frequently be &quot;A&quot; for a watch or &quot;Y&quot; for an advisory.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Significance { get; set; }
#nullable restore
#else
        public string Significance { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="KiotaDemo.Clients.WeatherApi.Models.Gridpoint_hazards_values_value"/> and sets the default values.
        /// </summary>
        public Gridpoint_hazards_values_value()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="KiotaDemo.Clients.WeatherApi.Models.Gridpoint_hazards_values_value"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static KiotaDemo.Clients.WeatherApi.Models.Gridpoint_hazards_values_value CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new KiotaDemo.Clients.WeatherApi.Models.Gridpoint_hazards_values_value();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "event_number", n => { EventNumber = n.GetIntValue(); } },
                { "phenomenon", n => { Phenomenon = n.GetStringValue(); } },
                { "significance", n => { Significance = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("event_number", EventNumber);
            writer.WriteStringValue("phenomenon", Phenomenon);
            writer.WriteStringValue("significance", Significance);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
