// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace KiotaDemo.Clients.WeatherApi.Models
{
    /// <summary>
    /// A value object representing expected weather phenomena.
    /// </summary>
    public class Gridpoint_weather_values_value : IParsable
    {
        /// <summary>The attributes property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<KiotaDemo.Clients.WeatherApi.Models.Gridpoint_weather_values_value_attributes?>? Attributes { get; set; }
#nullable restore
#else
        public List<KiotaDemo.Clients.WeatherApi.Models.Gridpoint_weather_values_value_attributes?> Attributes { get; set; }
#endif
        /// <summary>The coverage property</summary>
        public KiotaDemo.Clients.WeatherApi.Models.Gridpoint_weather_values_value_coverage? Coverage { get; set; }
        /// <summary>The intensity property</summary>
        public KiotaDemo.Clients.WeatherApi.Models.Gridpoint_weather_values_value_intensity? Intensity { get; set; }
        /// <summary>A structured value representing a measurement and its unit of measure. This object is a slighly modified version of the schema.org definition at https://schema.org/QuantitativeValue</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue? Visibility { get; set; }
#nullable restore
#else
        public KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue Visibility { get; set; }
#endif
        /// <summary>The weather property</summary>
        public KiotaDemo.Clients.WeatherApi.Models.Gridpoint_weather_values_value_weather? Weather { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="KiotaDemo.Clients.WeatherApi.Models.Gridpoint_weather_values_value"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static KiotaDemo.Clients.WeatherApi.Models.Gridpoint_weather_values_value CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new KiotaDemo.Clients.WeatherApi.Models.Gridpoint_weather_values_value();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "attributes", n => { Attributes = n.GetCollectionOfEnumValues<KiotaDemo.Clients.WeatherApi.Models.Gridpoint_weather_values_value_attributes>()?.ToList(); } },
                { "coverage", n => { Coverage = n.GetEnumValue<KiotaDemo.Clients.WeatherApi.Models.Gridpoint_weather_values_value_coverage>(); } },
                { "intensity", n => { Intensity = n.GetEnumValue<KiotaDemo.Clients.WeatherApi.Models.Gridpoint_weather_values_value_intensity>(); } },
                { "visibility", n => { Visibility = n.GetObjectValue<KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue>(KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue.CreateFromDiscriminatorValue); } },
                { "weather", n => { Weather = n.GetEnumValue<KiotaDemo.Clients.WeatherApi.Models.Gridpoint_weather_values_value_weather>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfEnumValues<KiotaDemo.Clients.WeatherApi.Models.Gridpoint_weather_values_value_attributes>("attributes", Attributes);
            writer.WriteEnumValue<KiotaDemo.Clients.WeatherApi.Models.Gridpoint_weather_values_value_coverage>("coverage", Coverage);
            writer.WriteEnumValue<KiotaDemo.Clients.WeatherApi.Models.Gridpoint_weather_values_value_intensity>("intensity", Intensity);
            writer.WriteObjectValue<KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue>("visibility", Visibility);
            writer.WriteEnumValue<KiotaDemo.Clients.WeatherApi.Models.Gridpoint_weather_values_value_weather>("weather", Weather);
        }
    }
}
