// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace KiotaDemo.Clients.WeatherApi.Models
{
    /// <summary>
    /// Raw forecast data for a 2.5km grid square.This is a list of all potential data layers that may appear. Some layers may not be present in all areas.* temperature* dewpoint* maxTemperature* minTemperature* relativeHumidity* apparentTemperature* heatIndex* windChill* wetBulbGlobeTemperature* skyCover* windDirection* windSpeed* windGust* weather* hazards: Watch and advisory products in effect* probabilityOfPrecipitation* quantitativePrecipitation* iceAccumulation* snowfallAmount* snowLevel* ceilingHeight* visibility* transportWindSpeed* transportWindDirection* mixingHeight* hainesIndex* lightningActivityLevel* twentyFootWindSpeed* twentyFootWindDirection* waveHeight* wavePeriod* waveDirection* primarySwellHeight* primarySwellDirection* secondarySwellHeight* secondarySwellDirection* wavePeriod2* windWaveHeight* dispersionIndex* pressure: Barometric pressure* probabilityOfTropicalStormWinds* probabilityOfHurricaneWinds* potentialOf15mphWinds* potentialOf25mphWinds* potentialOf35mphWinds* potentialOf45mphWinds* potentialOf20mphWindGusts* potentialOf30mphWindGusts* potentialOf40mphWindGusts* potentialOf50mphWindGusts* potentialOf60mphWindGusts* grasslandFireDangerIndex* probabilityOfThunder* davisStabilityIndex* atmosphericDispersionIndex* lowVisibilityOccurrenceRiskIndex* stability* redFlagThreatIndex
    /// </summary>
    public class Gridpoint : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The Context property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UntypedNode? Context { get; set; }
#nullable restore
#else
        public UntypedNode Context { get; set; }
#endif
        /// <summary>A structured value representing a measurement and its unit of measure. This object is a slighly modified version of the schema.org definition at https://schema.org/QuantitativeValue</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue? Elevation { get; set; }
#nullable restore
#else
        public KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue Elevation { get; set; }
#endif
        /// <summary>The forecastOffice property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ForecastOffice { get; set; }
#nullable restore
#else
        public string ForecastOffice { get; set; }
#endif
        /// <summary>A geometry represented in Well-Known Text (WKT) format.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Geometry { get; set; }
#nullable restore
#else
        public string Geometry { get; set; }
#endif
        /// <summary>The gridId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? GridId { get; set; }
#nullable restore
#else
        public string GridId { get; set; }
#endif
        /// <summary>The gridX property</summary>
        public int? GridX { get; set; }
        /// <summary>The gridY property</summary>
        public int? GridY { get; set; }
        /// <summary>The hazards property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public KiotaDemo.Clients.WeatherApi.Models.Gridpoint_hazards? Hazards { get; set; }
#nullable restore
#else
        public KiotaDemo.Clients.WeatherApi.Models.Gridpoint_hazards Hazards { get; set; }
#endif
        /// <summary>The Id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The Type property</summary>
        public KiotaDemo.Clients.WeatherApi.Models.Gridpoint_Type? Type { get; set; }
        /// <summary>The updateTime property</summary>
        public DateTimeOffset? UpdateTime { get; set; }
        /// <summary>A time interval in ISO 8601 format. This can be one of:    1. Start and end time    2. Start time and duration    3. Duration and end timeThe string &quot;NOW&quot; can also be used in place of a start/end time.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public KiotaDemo.Clients.WeatherApi.Models.ISO8601Interval? ValidTimes { get; set; }
#nullable restore
#else
        public KiotaDemo.Clients.WeatherApi.Models.ISO8601Interval ValidTimes { get; set; }
#endif
        /// <summary>The weather property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public KiotaDemo.Clients.WeatherApi.Models.Gridpoint_weather? Weather { get; set; }
#nullable restore
#else
        public KiotaDemo.Clients.WeatherApi.Models.Gridpoint_weather Weather { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="KiotaDemo.Clients.WeatherApi.Models.Gridpoint"/> and sets the default values.
        /// </summary>
        public Gridpoint()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="KiotaDemo.Clients.WeatherApi.Models.Gridpoint"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static KiotaDemo.Clients.WeatherApi.Models.Gridpoint CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new KiotaDemo.Clients.WeatherApi.Models.Gridpoint();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "@context", n => { Context = n.GetObjectValue<UntypedNode>(UntypedNode.CreateFromDiscriminatorValue); } },
                { "elevation", n => { Elevation = n.GetObjectValue<KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue>(KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue.CreateFromDiscriminatorValue); } },
                { "forecastOffice", n => { ForecastOffice = n.GetStringValue(); } },
                { "geometry", n => { Geometry = n.GetStringValue(); } },
                { "gridId", n => { GridId = n.GetStringValue(); } },
                { "gridX", n => { GridX = n.GetIntValue(); } },
                { "gridY", n => { GridY = n.GetIntValue(); } },
                { "hazards", n => { Hazards = n.GetObjectValue<KiotaDemo.Clients.WeatherApi.Models.Gridpoint_hazards>(KiotaDemo.Clients.WeatherApi.Models.Gridpoint_hazards.CreateFromDiscriminatorValue); } },
                { "@id", n => { Id = n.GetStringValue(); } },
                { "@type", n => { Type = n.GetEnumValue<KiotaDemo.Clients.WeatherApi.Models.Gridpoint_Type>(); } },
                { "updateTime", n => { UpdateTime = n.GetDateTimeOffsetValue(); } },
                { "validTimes", n => { ValidTimes = n.GetObjectValue<KiotaDemo.Clients.WeatherApi.Models.ISO8601Interval>(KiotaDemo.Clients.WeatherApi.Models.ISO8601Interval.CreateFromDiscriminatorValue); } },
                { "weather", n => { Weather = n.GetObjectValue<KiotaDemo.Clients.WeatherApi.Models.Gridpoint_weather>(KiotaDemo.Clients.WeatherApi.Models.Gridpoint_weather.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<UntypedNode>("@context", Context);
            writer.WriteObjectValue<KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue>("elevation", Elevation);
            writer.WriteStringValue("forecastOffice", ForecastOffice);
            writer.WriteStringValue("geometry", Geometry);
            writer.WriteStringValue("gridId", GridId);
            writer.WriteIntValue("gridX", GridX);
            writer.WriteIntValue("gridY", GridY);
            writer.WriteObjectValue<KiotaDemo.Clients.WeatherApi.Models.Gridpoint_hazards>("hazards", Hazards);
            writer.WriteStringValue("@id", Id);
            writer.WriteEnumValue<KiotaDemo.Clients.WeatherApi.Models.Gridpoint_Type>("@type", Type);
            writer.WriteDateTimeOffsetValue("updateTime", UpdateTime);
            writer.WriteObjectValue<KiotaDemo.Clients.WeatherApi.Models.ISO8601Interval>("validTimes", ValidTimes);
            writer.WriteObjectValue<KiotaDemo.Clients.WeatherApi.Models.Gridpoint_weather>("weather", Weather);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
