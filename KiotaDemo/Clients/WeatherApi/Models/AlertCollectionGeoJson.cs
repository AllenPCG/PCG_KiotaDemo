// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace KiotaDemo.Clients.WeatherApi.Models
{
    #pragma warning disable CS1591
    public class AlertCollectionGeoJson : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The Context property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UntypedNode? Context { get; set; }
#nullable restore
#else
        public UntypedNode Context { get; set; }
#endif
        /// <summary>The features property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<KiotaDemo.Clients.WeatherApi.Models.GeoJsonFeature>? Features { get; set; }
#nullable restore
#else
        public List<KiotaDemo.Clients.WeatherApi.Models.GeoJsonFeature> Features { get; set; }
#endif
        /// <summary>Links for retrieving more data from paged data sets</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public KiotaDemo.Clients.WeatherApi.Models.PaginationInfo? Pagination { get; set; }
#nullable restore
#else
        public KiotaDemo.Clients.WeatherApi.Models.PaginationInfo Pagination { get; set; }
#endif
        /// <summary>A title describing the alert collection</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Title { get; set; }
#nullable restore
#else
        public string Title { get; set; }
#endif
        /// <summary>The type property</summary>
        public KiotaDemo.Clients.WeatherApi.Models.AlertCollectionGeoJson_type? Type { get; set; }
        /// <summary>The last time a change occurred to this collection</summary>
        public DateTimeOffset? Updated { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="KiotaDemo.Clients.WeatherApi.Models.AlertCollectionGeoJson"/> and sets the default values.
        /// </summary>
        public AlertCollectionGeoJson()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="KiotaDemo.Clients.WeatherApi.Models.AlertCollectionGeoJson"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static KiotaDemo.Clients.WeatherApi.Models.AlertCollectionGeoJson CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new KiotaDemo.Clients.WeatherApi.Models.AlertCollectionGeoJson();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "@context", n => { Context = n.GetObjectValue<UntypedNode>(UntypedNode.CreateFromDiscriminatorValue); } },
                { "features", n => { Features = n.GetCollectionOfObjectValues<KiotaDemo.Clients.WeatherApi.Models.GeoJsonFeature>(KiotaDemo.Clients.WeatherApi.Models.GeoJsonFeature.CreateFromDiscriminatorValue)?.ToList(); } },
                { "pagination", n => { Pagination = n.GetObjectValue<KiotaDemo.Clients.WeatherApi.Models.PaginationInfo>(KiotaDemo.Clients.WeatherApi.Models.PaginationInfo.CreateFromDiscriminatorValue); } },
                { "title", n => { Title = n.GetStringValue(); } },
                { "type", n => { Type = n.GetEnumValue<KiotaDemo.Clients.WeatherApi.Models.AlertCollectionGeoJson_type>(); } },
                { "updated", n => { Updated = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<UntypedNode>("@context", Context);
            writer.WriteCollectionOfObjectValues<KiotaDemo.Clients.WeatherApi.Models.GeoJsonFeature>("features", Features);
            writer.WriteObjectValue<KiotaDemo.Clients.WeatherApi.Models.PaginationInfo>("pagination", Pagination);
            writer.WriteStringValue("title", Title);
            writer.WriteEnumValue<KiotaDemo.Clients.WeatherApi.Models.AlertCollectionGeoJson_type>("type", Type);
            writer.WriteDateTimeOffsetValue("updated", Updated);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
