// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace KiotaDemo.Clients.WeatherApi.Models
{
    /// <summary>
    /// A GeoJSON feature. Please refer to IETF RFC 7946 for information on the GeoJSON format.
    /// </summary>
    public class GeoJsonFeature : IParsable
    {
        /// <summary>The Context property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UntypedNode? Context { get; set; }
#nullable restore
#else
        public UntypedNode Context { get; set; }
#endif
        /// <summary>A GeoJSON geometry object. Please refer to IETF RFC 7946 for information on the GeoJSON format.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public KiotaDemo.Clients.WeatherApi.Models.GeoJsonGeometry? Geometry { get; set; }
#nullable restore
#else
        public KiotaDemo.Clients.WeatherApi.Models.GeoJsonGeometry Geometry { get; set; }
#endif
        /// <summary>The id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The properties property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public KiotaDemo.Clients.WeatherApi.Models.GeoJsonFeature_properties? Properties { get; set; }
#nullable restore
#else
        public KiotaDemo.Clients.WeatherApi.Models.GeoJsonFeature_properties Properties { get; set; }
#endif
        /// <summary>The type property</summary>
        public KiotaDemo.Clients.WeatherApi.Models.GeoJsonFeature_type? Type { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="KiotaDemo.Clients.WeatherApi.Models.GeoJsonFeature"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static KiotaDemo.Clients.WeatherApi.Models.GeoJsonFeature CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new KiotaDemo.Clients.WeatherApi.Models.GeoJsonFeature();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "@context", n => { Context = n.GetObjectValue<UntypedNode>(UntypedNode.CreateFromDiscriminatorValue); } },
                { "geometry", n => { Geometry = n.GetObjectValue<KiotaDemo.Clients.WeatherApi.Models.GeoJsonGeometry>(KiotaDemo.Clients.WeatherApi.Models.GeoJsonGeometry.CreateFromDiscriminatorValue); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "properties", n => { Properties = n.GetObjectValue<KiotaDemo.Clients.WeatherApi.Models.GeoJsonFeature_properties>(KiotaDemo.Clients.WeatherApi.Models.GeoJsonFeature_properties.CreateFromDiscriminatorValue); } },
                { "type", n => { Type = n.GetEnumValue<KiotaDemo.Clients.WeatherApi.Models.GeoJsonFeature_type>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<UntypedNode>("@context", Context);
            writer.WriteObjectValue<KiotaDemo.Clients.WeatherApi.Models.GeoJsonGeometry>("geometry", Geometry);
            writer.WriteStringValue("id", Id);
            writer.WriteObjectValue<KiotaDemo.Clients.WeatherApi.Models.GeoJsonFeature_properties>("properties", Properties);
            writer.WriteEnumValue<KiotaDemo.Clients.WeatherApi.Models.GeoJsonFeature_type>("type", Type);
        }
    }
}
