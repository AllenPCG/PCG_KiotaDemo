// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace KiotaDemo.Clients.WeatherApi.Models
{
    /// <summary>
    /// A multi-day forecast for a 2.5km grid square.
    /// </summary>
    public class GridpointForecast : IParsable
    {
        /// <summary>The Context property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UntypedNode? Context { get; set; }
#nullable restore
#else
        public UntypedNode Context { get; set; }
#endif
        /// <summary>A structured value representing a measurement and its unit of measure. This object is a slighly modified version of the schema.org definition at https://schema.org/QuantitativeValue</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue? Elevation { get; set; }
#nullable restore
#else
        public KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue Elevation { get; set; }
#endif
        /// <summary>The internal generator class used to create the forecast text (used for NWS debugging).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ForecastGenerator { get; set; }
#nullable restore
#else
        public string ForecastGenerator { get; set; }
#endif
        /// <summary>The time this forecast data was generated.</summary>
        public DateTimeOffset? GeneratedAt { get; set; }
        /// <summary>A geometry represented in Well-Known Text (WKT) format.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Geometry { get; set; }
#nullable restore
#else
        public string Geometry { get; set; }
#endif
        /// <summary>An array of forecast periods.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<KiotaDemo.Clients.WeatherApi.Models.GridpointForecastPeriod>? Periods { get; set; }
#nullable restore
#else
        public List<KiotaDemo.Clients.WeatherApi.Models.GridpointForecastPeriod> Periods { get; set; }
#endif
        /// <summary>Denotes the units used in the textual portions of the forecast.</summary>
        public KiotaDemo.Clients.WeatherApi.Models.GridpointForecastUnits? Units { get; set; }
        /// <summary>The last update time of the data this forecast was generated from.</summary>
        public DateTimeOffset? UpdateTime { get; set; }
        /// <summary>A time interval in ISO 8601 format. This can be one of:    1. Start and end time    2. Start time and duration    3. Duration and end timeThe string &quot;NOW&quot; can also be used in place of a start/end time.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public KiotaDemo.Clients.WeatherApi.Models.ISO8601Interval? ValidTimes { get; set; }
#nullable restore
#else
        public KiotaDemo.Clients.WeatherApi.Models.ISO8601Interval ValidTimes { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="KiotaDemo.Clients.WeatherApi.Models.GridpointForecast"/> and sets the default values.
        /// </summary>
        public GridpointForecast()
        {
            Units = KiotaDemo.Clients.WeatherApi.Models.GridpointForecastUnits.Us;
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="KiotaDemo.Clients.WeatherApi.Models.GridpointForecast"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static KiotaDemo.Clients.WeatherApi.Models.GridpointForecast CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new KiotaDemo.Clients.WeatherApi.Models.GridpointForecast();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "@context", n => { Context = n.GetObjectValue<UntypedNode>(UntypedNode.CreateFromDiscriminatorValue); } },
                { "elevation", n => { Elevation = n.GetObjectValue<KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue>(KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue.CreateFromDiscriminatorValue); } },
                { "forecastGenerator", n => { ForecastGenerator = n.GetStringValue(); } },
                { "generatedAt", n => { GeneratedAt = n.GetDateTimeOffsetValue(); } },
                { "geometry", n => { Geometry = n.GetStringValue(); } },
                { "periods", n => { Periods = n.GetCollectionOfObjectValues<KiotaDemo.Clients.WeatherApi.Models.GridpointForecastPeriod>(KiotaDemo.Clients.WeatherApi.Models.GridpointForecastPeriod.CreateFromDiscriminatorValue)?.ToList(); } },
                { "units", n => { Units = n.GetEnumValue<KiotaDemo.Clients.WeatherApi.Models.GridpointForecastUnits>(); } },
                { "updateTime", n => { UpdateTime = n.GetDateTimeOffsetValue(); } },
                { "validTimes", n => { ValidTimes = n.GetObjectValue<KiotaDemo.Clients.WeatherApi.Models.ISO8601Interval>(KiotaDemo.Clients.WeatherApi.Models.ISO8601Interval.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<UntypedNode>("@context", Context);
            writer.WriteObjectValue<KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue>("elevation", Elevation);
            writer.WriteStringValue("forecastGenerator", ForecastGenerator);
            writer.WriteDateTimeOffsetValue("generatedAt", GeneratedAt);
            writer.WriteStringValue("geometry", Geometry);
            writer.WriteCollectionOfObjectValues<KiotaDemo.Clients.WeatherApi.Models.GridpointForecastPeriod>("periods", Periods);
            writer.WriteEnumValue<KiotaDemo.Clients.WeatherApi.Models.GridpointForecastUnits>("units", Units);
            writer.WriteDateTimeOffsetValue("updateTime", UpdateTime);
            writer.WriteObjectValue<KiotaDemo.Clients.WeatherApi.Models.ISO8601Interval>("validTimes", ValidTimes);
        }
    }
}
