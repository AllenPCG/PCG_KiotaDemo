// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace KiotaDemo.Clients.WeatherApi.Models
{
    /// <summary>
    /// Composed type wrapper for classes <see cref="KiotaDemo.Clients.WeatherApi.Models.GeoJsonGeometryMember1"/>, <see cref="KiotaDemo.Clients.WeatherApi.Models.GeoJsonGeometryMember2"/>, <see cref="KiotaDemo.Clients.WeatherApi.Models.GeoJsonGeometryMember3"/>, <see cref="KiotaDemo.Clients.WeatherApi.Models.GeoJsonGeometryMember4"/>, <see cref="KiotaDemo.Clients.WeatherApi.Models.GeoJsonGeometryMember5"/>, <see cref="KiotaDemo.Clients.WeatherApi.Models.GeoJsonGeometryMember6"/>
    /// </summary>
    public class GeoJsonGeometry : IComposedTypeWrapper, IParsable
    {
        /// <summary>Composed type representation for type <see cref="KiotaDemo.Clients.WeatherApi.Models.GeoJsonGeometryMember1"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public KiotaDemo.Clients.WeatherApi.Models.GeoJsonGeometryMember1? GeoJsonGeometryMember1 { get; set; }
#nullable restore
#else
        public KiotaDemo.Clients.WeatherApi.Models.GeoJsonGeometryMember1 GeoJsonGeometryMember1 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="KiotaDemo.Clients.WeatherApi.Models.GeoJsonGeometryMember2"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public KiotaDemo.Clients.WeatherApi.Models.GeoJsonGeometryMember2? GeoJsonGeometryMember2 { get; set; }
#nullable restore
#else
        public KiotaDemo.Clients.WeatherApi.Models.GeoJsonGeometryMember2 GeoJsonGeometryMember2 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="KiotaDemo.Clients.WeatherApi.Models.GeoJsonGeometryMember3"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public KiotaDemo.Clients.WeatherApi.Models.GeoJsonGeometryMember3? GeoJsonGeometryMember3 { get; set; }
#nullable restore
#else
        public KiotaDemo.Clients.WeatherApi.Models.GeoJsonGeometryMember3 GeoJsonGeometryMember3 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="KiotaDemo.Clients.WeatherApi.Models.GeoJsonGeometryMember4"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public KiotaDemo.Clients.WeatherApi.Models.GeoJsonGeometryMember4? GeoJsonGeometryMember4 { get; set; }
#nullable restore
#else
        public KiotaDemo.Clients.WeatherApi.Models.GeoJsonGeometryMember4 GeoJsonGeometryMember4 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="KiotaDemo.Clients.WeatherApi.Models.GeoJsonGeometryMember5"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public KiotaDemo.Clients.WeatherApi.Models.GeoJsonGeometryMember5? GeoJsonGeometryMember5 { get; set; }
#nullable restore
#else
        public KiotaDemo.Clients.WeatherApi.Models.GeoJsonGeometryMember5 GeoJsonGeometryMember5 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="KiotaDemo.Clients.WeatherApi.Models.GeoJsonGeometryMember6"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public KiotaDemo.Clients.WeatherApi.Models.GeoJsonGeometryMember6? GeoJsonGeometryMember6 { get; set; }
#nullable restore
#else
        public KiotaDemo.Clients.WeatherApi.Models.GeoJsonGeometryMember6 GeoJsonGeometryMember6 { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="KiotaDemo.Clients.WeatherApi.Models.GeoJsonGeometry"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static KiotaDemo.Clients.WeatherApi.Models.GeoJsonGeometry CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
            var result = new KiotaDemo.Clients.WeatherApi.Models.GeoJsonGeometry();
            if("".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.GeoJsonGeometryMember1 = new KiotaDemo.Clients.WeatherApi.Models.GeoJsonGeometryMember1();
            }
            else if("".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.GeoJsonGeometryMember2 = new KiotaDemo.Clients.WeatherApi.Models.GeoJsonGeometryMember2();
            }
            else if("".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.GeoJsonGeometryMember3 = new KiotaDemo.Clients.WeatherApi.Models.GeoJsonGeometryMember3();
            }
            else if("".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.GeoJsonGeometryMember4 = new KiotaDemo.Clients.WeatherApi.Models.GeoJsonGeometryMember4();
            }
            else if("".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.GeoJsonGeometryMember5 = new KiotaDemo.Clients.WeatherApi.Models.GeoJsonGeometryMember5();
            }
            else if("".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.GeoJsonGeometryMember6 = new KiotaDemo.Clients.WeatherApi.Models.GeoJsonGeometryMember6();
            }
            return result;
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            if(GeoJsonGeometryMember1 != null)
            {
                return GeoJsonGeometryMember1.GetFieldDeserializers();
            }
            else if(GeoJsonGeometryMember2 != null)
            {
                return GeoJsonGeometryMember2.GetFieldDeserializers();
            }
            else if(GeoJsonGeometryMember3 != null)
            {
                return GeoJsonGeometryMember3.GetFieldDeserializers();
            }
            else if(GeoJsonGeometryMember4 != null)
            {
                return GeoJsonGeometryMember4.GetFieldDeserializers();
            }
            else if(GeoJsonGeometryMember5 != null)
            {
                return GeoJsonGeometryMember5.GetFieldDeserializers();
            }
            else if(GeoJsonGeometryMember6 != null)
            {
                return GeoJsonGeometryMember6.GetFieldDeserializers();
            }
            return new Dictionary<string, Action<IParseNode>>();
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            if(GeoJsonGeometryMember1 != null)
            {
                writer.WriteObjectValue<KiotaDemo.Clients.WeatherApi.Models.GeoJsonGeometryMember1>(null, GeoJsonGeometryMember1);
            }
            else if(GeoJsonGeometryMember2 != null)
            {
                writer.WriteObjectValue<KiotaDemo.Clients.WeatherApi.Models.GeoJsonGeometryMember2>(null, GeoJsonGeometryMember2);
            }
            else if(GeoJsonGeometryMember3 != null)
            {
                writer.WriteObjectValue<KiotaDemo.Clients.WeatherApi.Models.GeoJsonGeometryMember3>(null, GeoJsonGeometryMember3);
            }
            else if(GeoJsonGeometryMember4 != null)
            {
                writer.WriteObjectValue<KiotaDemo.Clients.WeatherApi.Models.GeoJsonGeometryMember4>(null, GeoJsonGeometryMember4);
            }
            else if(GeoJsonGeometryMember5 != null)
            {
                writer.WriteObjectValue<KiotaDemo.Clients.WeatherApi.Models.GeoJsonGeometryMember5>(null, GeoJsonGeometryMember5);
            }
            else if(GeoJsonGeometryMember6 != null)
            {
                writer.WriteObjectValue<KiotaDemo.Clients.WeatherApi.Models.GeoJsonGeometryMember6>(null, GeoJsonGeometryMember6);
            }
        }
    }
}
