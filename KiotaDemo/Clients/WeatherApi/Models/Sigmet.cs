// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace KiotaDemo.Clients.WeatherApi.Models
{
    #pragma warning disable CS1591
    public class Sigmet : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>ATSU Identifier</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Atsu { get; set; }
#nullable restore
#else
        public string Atsu { get; set; }
#endif
        /// <summary>The end property</summary>
        public DateTimeOffset? End { get; set; }
        /// <summary>The fir property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Fir { get; set; }
#nullable restore
#else
        public string Fir { get; set; }
#endif
        /// <summary>The id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The issueTime property</summary>
        public DateTimeOffset? IssueTime { get; set; }
        /// <summary>The phenomenon property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Phenomenon { get; set; }
#nullable restore
#else
        public string Phenomenon { get; set; }
#endif
        /// <summary>The sequence property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Sequence { get; set; }
#nullable restore
#else
        public string Sequence { get; set; }
#endif
        /// <summary>The start property</summary>
        public DateTimeOffset? Start { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="KiotaDemo.Clients.WeatherApi.Models.Sigmet"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static KiotaDemo.Clients.WeatherApi.Models.Sigmet CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new KiotaDemo.Clients.WeatherApi.Models.Sigmet();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "atsu", n => { Atsu = n.GetStringValue(); } },
                { "end", n => { End = n.GetDateTimeOffsetValue(); } },
                { "fir", n => { Fir = n.GetStringValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "issueTime", n => { IssueTime = n.GetDateTimeOffsetValue(); } },
                { "phenomenon", n => { Phenomenon = n.GetStringValue(); } },
                { "sequence", n => { Sequence = n.GetStringValue(); } },
                { "start", n => { Start = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("atsu", Atsu);
            writer.WriteDateTimeOffsetValue("end", End);
            writer.WriteStringValue("fir", Fir);
            writer.WriteStringValue("id", Id);
            writer.WriteDateTimeOffsetValue("issueTime", IssueTime);
            writer.WriteStringValue("phenomenon", Phenomenon);
            writer.WriteStringValue("sequence", Sequence);
            writer.WriteDateTimeOffsetValue("start", Start);
        }
    }
}
