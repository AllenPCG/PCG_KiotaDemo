// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace KiotaDemo.Clients.WeatherApi.Models
{
    #pragma warning disable CS1591
    public class Observation : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>A structured value representing a measurement and its unit of measure. This object is a slighly modified version of the schema.org definition at https://schema.org/QuantitativeValue</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue? BarometricPressure { get; set; }
#nullable restore
#else
        public KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue BarometricPressure { get; set; }
#endif
        /// <summary>The cloudLayers property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<KiotaDemo.Clients.WeatherApi.Models.Observation_cloudLayers>? CloudLayers { get; set; }
#nullable restore
#else
        public List<KiotaDemo.Clients.WeatherApi.Models.Observation_cloudLayers> CloudLayers { get; set; }
#endif
        /// <summary>The Context property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UntypedNode? Context { get; set; }
#nullable restore
#else
        public UntypedNode Context { get; set; }
#endif
        /// <summary>A structured value representing a measurement and its unit of measure. This object is a slighly modified version of the schema.org definition at https://schema.org/QuantitativeValue</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue? Dewpoint { get; set; }
#nullable restore
#else
        public KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue Dewpoint { get; set; }
#endif
        /// <summary>A structured value representing a measurement and its unit of measure. This object is a slighly modified version of the schema.org definition at https://schema.org/QuantitativeValue</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue? Elevation { get; set; }
#nullable restore
#else
        public KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue Elevation { get; set; }
#endif
        /// <summary>A geometry represented in Well-Known Text (WKT) format.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Geometry { get; set; }
#nullable restore
#else
        public string Geometry { get; set; }
#endif
        /// <summary>A structured value representing a measurement and its unit of measure. This object is a slighly modified version of the schema.org definition at https://schema.org/QuantitativeValue</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue? HeatIndex { get; set; }
#nullable restore
#else
        public KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue HeatIndex { get; set; }
#endif
        /// <summary>The icon property</summary>
        [Obsolete("")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Icon { get; set; }
#nullable restore
#else
        public string Icon { get; set; }
#endif
        /// <summary>The Id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>A structured value representing a measurement and its unit of measure. This object is a slighly modified version of the schema.org definition at https://schema.org/QuantitativeValue</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue? MaxTemperatureLast24Hours { get; set; }
#nullable restore
#else
        public KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue MaxTemperatureLast24Hours { get; set; }
#endif
        /// <summary>A structured value representing a measurement and its unit of measure. This object is a slighly modified version of the schema.org definition at https://schema.org/QuantitativeValue</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue? MinTemperatureLast24Hours { get; set; }
#nullable restore
#else
        public KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue MinTemperatureLast24Hours { get; set; }
#endif
        /// <summary>A structured value representing a measurement and its unit of measure. This object is a slighly modified version of the schema.org definition at https://schema.org/QuantitativeValue</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue? PrecipitationLast3Hours { get; set; }
#nullable restore
#else
        public KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue PrecipitationLast3Hours { get; set; }
#endif
        /// <summary>A structured value representing a measurement and its unit of measure. This object is a slighly modified version of the schema.org definition at https://schema.org/QuantitativeValue</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue? PrecipitationLast6Hours { get; set; }
#nullable restore
#else
        public KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue PrecipitationLast6Hours { get; set; }
#endif
        /// <summary>A structured value representing a measurement and its unit of measure. This object is a slighly modified version of the schema.org definition at https://schema.org/QuantitativeValue</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue? PrecipitationLastHour { get; set; }
#nullable restore
#else
        public KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue PrecipitationLastHour { get; set; }
#endif
        /// <summary>The presentWeather property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<KiotaDemo.Clients.WeatherApi.Models.MetarPhenomenon>? PresentWeather { get; set; }
#nullable restore
#else
        public List<KiotaDemo.Clients.WeatherApi.Models.MetarPhenomenon> PresentWeather { get; set; }
#endif
        /// <summary>The rawMessage property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RawMessage { get; set; }
#nullable restore
#else
        public string RawMessage { get; set; }
#endif
        /// <summary>A structured value representing a measurement and its unit of measure. This object is a slighly modified version of the schema.org definition at https://schema.org/QuantitativeValue</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue? RelativeHumidity { get; set; }
#nullable restore
#else
        public KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue RelativeHumidity { get; set; }
#endif
        /// <summary>A structured value representing a measurement and its unit of measure. This object is a slighly modified version of the schema.org definition at https://schema.org/QuantitativeValue</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue? SeaLevelPressure { get; set; }
#nullable restore
#else
        public KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue SeaLevelPressure { get; set; }
#endif
        /// <summary>The station property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Station { get; set; }
#nullable restore
#else
        public string Station { get; set; }
#endif
        /// <summary>A structured value representing a measurement and its unit of measure. This object is a slighly modified version of the schema.org definition at https://schema.org/QuantitativeValue</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue? Temperature { get; set; }
#nullable restore
#else
        public KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue Temperature { get; set; }
#endif
        /// <summary>The textDescription property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TextDescription { get; set; }
#nullable restore
#else
        public string TextDescription { get; set; }
#endif
        /// <summary>The timestamp property</summary>
        public DateTimeOffset? Timestamp { get; set; }
        /// <summary>The Type property</summary>
        public KiotaDemo.Clients.WeatherApi.Models.Observation_Type? Type { get; set; }
        /// <summary>A structured value representing a measurement and its unit of measure. This object is a slighly modified version of the schema.org definition at https://schema.org/QuantitativeValue</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue? Visibility { get; set; }
#nullable restore
#else
        public KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue Visibility { get; set; }
#endif
        /// <summary>A structured value representing a measurement and its unit of measure. This object is a slighly modified version of the schema.org definition at https://schema.org/QuantitativeValue</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue? WindChill { get; set; }
#nullable restore
#else
        public KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue WindChill { get; set; }
#endif
        /// <summary>A structured value representing a measurement and its unit of measure. This object is a slighly modified version of the schema.org definition at https://schema.org/QuantitativeValue</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue? WindDirection { get; set; }
#nullable restore
#else
        public KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue WindDirection { get; set; }
#endif
        /// <summary>A structured value representing a measurement and its unit of measure. This object is a slighly modified version of the schema.org definition at https://schema.org/QuantitativeValue</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue? WindGust { get; set; }
#nullable restore
#else
        public KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue WindGust { get; set; }
#endif
        /// <summary>A structured value representing a measurement and its unit of measure. This object is a slighly modified version of the schema.org definition at https://schema.org/QuantitativeValue</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue? WindSpeed { get; set; }
#nullable restore
#else
        public KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue WindSpeed { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="KiotaDemo.Clients.WeatherApi.Models.Observation"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static KiotaDemo.Clients.WeatherApi.Models.Observation CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new KiotaDemo.Clients.WeatherApi.Models.Observation();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "barometricPressure", n => { BarometricPressure = n.GetObjectValue<KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue>(KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue.CreateFromDiscriminatorValue); } },
                { "cloudLayers", n => { CloudLayers = n.GetCollectionOfObjectValues<KiotaDemo.Clients.WeatherApi.Models.Observation_cloudLayers>(KiotaDemo.Clients.WeatherApi.Models.Observation_cloudLayers.CreateFromDiscriminatorValue)?.ToList(); } },
                { "@context", n => { Context = n.GetObjectValue<UntypedNode>(UntypedNode.CreateFromDiscriminatorValue); } },
                { "dewpoint", n => { Dewpoint = n.GetObjectValue<KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue>(KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue.CreateFromDiscriminatorValue); } },
                { "elevation", n => { Elevation = n.GetObjectValue<KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue>(KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue.CreateFromDiscriminatorValue); } },
                { "geometry", n => { Geometry = n.GetStringValue(); } },
                { "heatIndex", n => { HeatIndex = n.GetObjectValue<KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue>(KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue.CreateFromDiscriminatorValue); } },
                { "icon", n => { Icon = n.GetStringValue(); } },
                { "@id", n => { Id = n.GetStringValue(); } },
                { "maxTemperatureLast24Hours", n => { MaxTemperatureLast24Hours = n.GetObjectValue<KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue>(KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue.CreateFromDiscriminatorValue); } },
                { "minTemperatureLast24Hours", n => { MinTemperatureLast24Hours = n.GetObjectValue<KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue>(KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue.CreateFromDiscriminatorValue); } },
                { "precipitationLast3Hours", n => { PrecipitationLast3Hours = n.GetObjectValue<KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue>(KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue.CreateFromDiscriminatorValue); } },
                { "precipitationLast6Hours", n => { PrecipitationLast6Hours = n.GetObjectValue<KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue>(KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue.CreateFromDiscriminatorValue); } },
                { "precipitationLastHour", n => { PrecipitationLastHour = n.GetObjectValue<KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue>(KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue.CreateFromDiscriminatorValue); } },
                { "presentWeather", n => { PresentWeather = n.GetCollectionOfObjectValues<KiotaDemo.Clients.WeatherApi.Models.MetarPhenomenon>(KiotaDemo.Clients.WeatherApi.Models.MetarPhenomenon.CreateFromDiscriminatorValue)?.ToList(); } },
                { "rawMessage", n => { RawMessage = n.GetStringValue(); } },
                { "relativeHumidity", n => { RelativeHumidity = n.GetObjectValue<KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue>(KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue.CreateFromDiscriminatorValue); } },
                { "seaLevelPressure", n => { SeaLevelPressure = n.GetObjectValue<KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue>(KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue.CreateFromDiscriminatorValue); } },
                { "station", n => { Station = n.GetStringValue(); } },
                { "temperature", n => { Temperature = n.GetObjectValue<KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue>(KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue.CreateFromDiscriminatorValue); } },
                { "textDescription", n => { TextDescription = n.GetStringValue(); } },
                { "timestamp", n => { Timestamp = n.GetDateTimeOffsetValue(); } },
                { "@type", n => { Type = n.GetEnumValue<KiotaDemo.Clients.WeatherApi.Models.Observation_Type>(); } },
                { "visibility", n => { Visibility = n.GetObjectValue<KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue>(KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue.CreateFromDiscriminatorValue); } },
                { "windChill", n => { WindChill = n.GetObjectValue<KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue>(KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue.CreateFromDiscriminatorValue); } },
                { "windDirection", n => { WindDirection = n.GetObjectValue<KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue>(KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue.CreateFromDiscriminatorValue); } },
                { "windGust", n => { WindGust = n.GetObjectValue<KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue>(KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue.CreateFromDiscriminatorValue); } },
                { "windSpeed", n => { WindSpeed = n.GetObjectValue<KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue>(KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue>("barometricPressure", BarometricPressure);
            writer.WriteCollectionOfObjectValues<KiotaDemo.Clients.WeatherApi.Models.Observation_cloudLayers>("cloudLayers", CloudLayers);
            writer.WriteObjectValue<UntypedNode>("@context", Context);
            writer.WriteObjectValue<KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue>("dewpoint", Dewpoint);
            writer.WriteObjectValue<KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue>("elevation", Elevation);
            writer.WriteStringValue("geometry", Geometry);
            writer.WriteObjectValue<KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue>("heatIndex", HeatIndex);
            writer.WriteStringValue("icon", Icon);
            writer.WriteStringValue("@id", Id);
            writer.WriteObjectValue<KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue>("maxTemperatureLast24Hours", MaxTemperatureLast24Hours);
            writer.WriteObjectValue<KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue>("minTemperatureLast24Hours", MinTemperatureLast24Hours);
            writer.WriteObjectValue<KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue>("precipitationLast3Hours", PrecipitationLast3Hours);
            writer.WriteObjectValue<KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue>("precipitationLast6Hours", PrecipitationLast6Hours);
            writer.WriteObjectValue<KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue>("precipitationLastHour", PrecipitationLastHour);
            writer.WriteCollectionOfObjectValues<KiotaDemo.Clients.WeatherApi.Models.MetarPhenomenon>("presentWeather", PresentWeather);
            writer.WriteStringValue("rawMessage", RawMessage);
            writer.WriteObjectValue<KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue>("relativeHumidity", RelativeHumidity);
            writer.WriteObjectValue<KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue>("seaLevelPressure", SeaLevelPressure);
            writer.WriteStringValue("station", Station);
            writer.WriteObjectValue<KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue>("temperature", Temperature);
            writer.WriteStringValue("textDescription", TextDescription);
            writer.WriteDateTimeOffsetValue("timestamp", Timestamp);
            writer.WriteEnumValue<KiotaDemo.Clients.WeatherApi.Models.Observation_Type>("@type", Type);
            writer.WriteObjectValue<KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue>("visibility", Visibility);
            writer.WriteObjectValue<KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue>("windChill", WindChill);
            writer.WriteObjectValue<KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue>("windDirection", WindDirection);
            writer.WriteObjectValue<KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue>("windGust", WindGust);
            writer.WriteObjectValue<KiotaDemo.Clients.WeatherApi.Models.QuantitativeValue>("windSpeed", WindSpeed);
        }
    }
}
