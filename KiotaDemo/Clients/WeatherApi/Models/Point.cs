// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace KiotaDemo.Clients.WeatherApi.Models
{
    #pragma warning disable CS1591
    public class Point : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The Context property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UntypedNode? Context { get; set; }
#nullable restore
#else
        public UntypedNode Context { get; set; }
#endif
        /// <summary>The county property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? County { get; set; }
#nullable restore
#else
        public string County { get; set; }
#endif
        /// <summary>Three-letter identifier for a NWS office.</summary>
        public KiotaDemo.Clients.WeatherApi.Models.NWSForecastOfficeId? Cwa { get; set; }
        /// <summary>The fireWeatherZone property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FireWeatherZone { get; set; }
#nullable restore
#else
        public string FireWeatherZone { get; set; }
#endif
        /// <summary>The forecast property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Forecast { get; set; }
#nullable restore
#else
        public string Forecast { get; set; }
#endif
        /// <summary>The forecastGridData property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ForecastGridData { get; set; }
#nullable restore
#else
        public string ForecastGridData { get; set; }
#endif
        /// <summary>The forecastHourly property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ForecastHourly { get; set; }
#nullable restore
#else
        public string ForecastHourly { get; set; }
#endif
        /// <summary>The forecastOffice property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ForecastOffice { get; set; }
#nullable restore
#else
        public string ForecastOffice { get; set; }
#endif
        /// <summary>The forecastZone property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ForecastZone { get; set; }
#nullable restore
#else
        public string ForecastZone { get; set; }
#endif
        /// <summary>A geometry represented in Well-Known Text (WKT) format.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Geometry { get; set; }
#nullable restore
#else
        public string Geometry { get; set; }
#endif
        /// <summary>Three-letter identifier for a NWS office.</summary>
        public KiotaDemo.Clients.WeatherApi.Models.NWSForecastOfficeId? GridId { get; set; }
        /// <summary>The gridX property</summary>
        public int? GridX { get; set; }
        /// <summary>The gridY property</summary>
        public int? GridY { get; set; }
        /// <summary>The Id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The observationStations property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ObservationStations { get; set; }
#nullable restore
#else
        public string ObservationStations { get; set; }
#endif
        /// <summary>The radarStation property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RadarStation { get; set; }
#nullable restore
#else
        public string RadarStation { get; set; }
#endif
        /// <summary>The relativeLocation property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public KiotaDemo.Clients.WeatherApi.Models.Point.Point_relativeLocation? RelativeLocation { get; set; }
#nullable restore
#else
        public KiotaDemo.Clients.WeatherApi.Models.Point.Point_relativeLocation RelativeLocation { get; set; }
#endif
        /// <summary>The timeZone property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TimeZone { get; set; }
#nullable restore
#else
        public string TimeZone { get; set; }
#endif
        /// <summary>The Type property</summary>
        public KiotaDemo.Clients.WeatherApi.Models.Point_Type? Type { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="KiotaDemo.Clients.WeatherApi.Models.Point"/> and sets the default values.
        /// </summary>
        public Point()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="KiotaDemo.Clients.WeatherApi.Models.Point"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static KiotaDemo.Clients.WeatherApi.Models.Point CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new KiotaDemo.Clients.WeatherApi.Models.Point();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "@context", n => { Context = n.GetObjectValue<UntypedNode>(UntypedNode.CreateFromDiscriminatorValue); } },
                { "county", n => { County = n.GetStringValue(); } },
                { "cwa", n => { Cwa = n.GetEnumValue<KiotaDemo.Clients.WeatherApi.Models.NWSForecastOfficeId>(); } },
                { "fireWeatherZone", n => { FireWeatherZone = n.GetStringValue(); } },
                { "forecast", n => { Forecast = n.GetStringValue(); } },
                { "forecastGridData", n => { ForecastGridData = n.GetStringValue(); } },
                { "forecastHourly", n => { ForecastHourly = n.GetStringValue(); } },
                { "forecastOffice", n => { ForecastOffice = n.GetStringValue(); } },
                { "forecastZone", n => { ForecastZone = n.GetStringValue(); } },
                { "geometry", n => { Geometry = n.GetStringValue(); } },
                { "gridId", n => { GridId = n.GetEnumValue<KiotaDemo.Clients.WeatherApi.Models.NWSForecastOfficeId>(); } },
                { "gridX", n => { GridX = n.GetIntValue(); } },
                { "gridY", n => { GridY = n.GetIntValue(); } },
                { "@id", n => { Id = n.GetStringValue(); } },
                { "observationStations", n => { ObservationStations = n.GetStringValue(); } },
                { "radarStation", n => { RadarStation = n.GetStringValue(); } },
                { "relativeLocation", n => { RelativeLocation = n.GetObjectValue<KiotaDemo.Clients.WeatherApi.Models.Point.Point_relativeLocation>(KiotaDemo.Clients.WeatherApi.Models.Point.Point_relativeLocation.CreateFromDiscriminatorValue); } },
                { "timeZone", n => { TimeZone = n.GetStringValue(); } },
                { "@type", n => { Type = n.GetEnumValue<KiotaDemo.Clients.WeatherApi.Models.Point_Type>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<UntypedNode>("@context", Context);
            writer.WriteStringValue("county", County);
            writer.WriteEnumValue<KiotaDemo.Clients.WeatherApi.Models.NWSForecastOfficeId>("cwa", Cwa);
            writer.WriteStringValue("fireWeatherZone", FireWeatherZone);
            writer.WriteStringValue("forecast", Forecast);
            writer.WriteStringValue("forecastGridData", ForecastGridData);
            writer.WriteStringValue("forecastHourly", ForecastHourly);
            writer.WriteStringValue("forecastOffice", ForecastOffice);
            writer.WriteStringValue("forecastZone", ForecastZone);
            writer.WriteStringValue("geometry", Geometry);
            writer.WriteEnumValue<KiotaDemo.Clients.WeatherApi.Models.NWSForecastOfficeId>("gridId", GridId);
            writer.WriteIntValue("gridX", GridX);
            writer.WriteIntValue("gridY", GridY);
            writer.WriteStringValue("@id", Id);
            writer.WriteStringValue("observationStations", ObservationStations);
            writer.WriteStringValue("radarStation", RadarStation);
            writer.WriteObjectValue<KiotaDemo.Clients.WeatherApi.Models.Point.Point_relativeLocation>("relativeLocation", RelativeLocation);
            writer.WriteStringValue("timeZone", TimeZone);
            writer.WriteEnumValue<KiotaDemo.Clients.WeatherApi.Models.Point_Type>("@type", Type);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="KiotaDemo.Clients.WeatherApi.Models.RelativeLocationGeoJson"/>, <see cref="KiotaDemo.Clients.WeatherApi.Models.RelativeLocationJsonLd"/>
        /// </summary>
        public class Point_relativeLocation : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="KiotaDemo.Clients.WeatherApi.Models.RelativeLocationGeoJson"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public KiotaDemo.Clients.WeatherApi.Models.RelativeLocationGeoJson? RelativeLocationGeoJson { get; set; }
#nullable restore
#else
            public KiotaDemo.Clients.WeatherApi.Models.RelativeLocationGeoJson RelativeLocationGeoJson { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="KiotaDemo.Clients.WeatherApi.Models.RelativeLocationJsonLd"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public KiotaDemo.Clients.WeatherApi.Models.RelativeLocationJsonLd? RelativeLocationJsonLd { get; set; }
#nullable restore
#else
            public KiotaDemo.Clients.WeatherApi.Models.RelativeLocationJsonLd RelativeLocationJsonLd { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="KiotaDemo.Clients.WeatherApi.Models.Point.Point_relativeLocation"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static KiotaDemo.Clients.WeatherApi.Models.Point.Point_relativeLocation CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new KiotaDemo.Clients.WeatherApi.Models.Point.Point_relativeLocation();
                if("RelativeLocationGeoJson".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.RelativeLocationGeoJson = new KiotaDemo.Clients.WeatherApi.Models.RelativeLocationGeoJson();
                }
                else if("RelativeLocationJsonLd".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.RelativeLocationJsonLd = new KiotaDemo.Clients.WeatherApi.Models.RelativeLocationJsonLd();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(RelativeLocationGeoJson != null)
                {
                    return RelativeLocationGeoJson.GetFieldDeserializers();
                }
                else if(RelativeLocationJsonLd != null)
                {
                    return RelativeLocationJsonLd.GetFieldDeserializers();
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(RelativeLocationGeoJson != null)
                {
                    writer.WriteObjectValue<KiotaDemo.Clients.WeatherApi.Models.RelativeLocationGeoJson>(null, RelativeLocationGeoJson);
                }
                else if(RelativeLocationJsonLd != null)
                {
                    writer.WriteObjectValue<KiotaDemo.Clients.WeatherApi.Models.RelativeLocationJsonLd>(null, RelativeLocationJsonLd);
                }
            }
        }
    }
}
