// <auto-generated/>
using KiotaDemo.Clients.WeatherApi.Alerts.Active;
using KiotaDemo.Clients.WeatherApi.Alerts.Item;
using KiotaDemo.Clients.WeatherApi.Alerts.Types;
using KiotaDemo.Clients.WeatherApi.Models;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace KiotaDemo.Clients.WeatherApi.Alerts
{
    /// <summary>
    /// Builds and executes requests for operations under \alerts
    /// </summary>
    public class AlertsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The active property</summary>
        public KiotaDemo.Clients.WeatherApi.Alerts.Active.ActiveRequestBuilder Active
        {
            get => new KiotaDemo.Clients.WeatherApi.Alerts.Active.ActiveRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The types property</summary>
        public KiotaDemo.Clients.WeatherApi.Alerts.Types.TypesRequestBuilder Types
        {
            get => new KiotaDemo.Clients.WeatherApi.Alerts.Types.TypesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the KiotaDemo.Clients.WeatherApi.alerts.item collection</summary>
        /// <param name="position">Alert identifier</param>
        /// <returns>A <see cref="KiotaDemo.Clients.WeatherApi.Alerts.Item.AlertsItemRequestBuilder"/></returns>
        public KiotaDemo.Clients.WeatherApi.Alerts.Item.AlertsItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("id", position);
                return new KiotaDemo.Clients.WeatherApi.Alerts.Item.AlertsItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="KiotaDemo.Clients.WeatherApi.Alerts.AlertsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public AlertsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/alerts{?active*,area,certainty,code,cursor*,end*,event,limit*,message_type,point*,region,region_type*,severity,start*,status,urgency,zone}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="KiotaDemo.Clients.WeatherApi.Alerts.AlertsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public AlertsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/alerts{?active*,area,certainty,code,cursor*,end*,event,limit*,message_type,point*,region,region_type*,severity,start*,status,urgency,zone}", rawUrl)
        {
        }
        /// <summary>
        /// Returns all alerts
        /// </summary>
        /// <returns>A <see cref="KiotaDemo.Clients.WeatherApi.Models.AlertCollectionGeoJson"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="KiotaDemo.Clients.WeatherApi.Models.ProblemDetail">When receiving a 4XX or 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<KiotaDemo.Clients.WeatherApi.Models.AlertCollectionGeoJson?> GetAsync(Action<RequestConfiguration<KiotaDemo.Clients.WeatherApi.Alerts.AlertsRequestBuilder.AlertsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<KiotaDemo.Clients.WeatherApi.Models.AlertCollectionGeoJson> GetAsync(Action<RequestConfiguration<KiotaDemo.Clients.WeatherApi.Alerts.AlertsRequestBuilder.AlertsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "XXX", KiotaDemo.Clients.WeatherApi.Models.ProblemDetail.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<KiotaDemo.Clients.WeatherApi.Models.AlertCollectionGeoJson>(requestInfo, KiotaDemo.Clients.WeatherApi.Models.AlertCollectionGeoJson.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns all alerts
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<KiotaDemo.Clients.WeatherApi.Alerts.AlertsRequestBuilder.AlertsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<KiotaDemo.Clients.WeatherApi.Alerts.AlertsRequestBuilder.AlertsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/geo+json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="KiotaDemo.Clients.WeatherApi.Alerts.AlertsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public KiotaDemo.Clients.WeatherApi.Alerts.AlertsRequestBuilder WithUrl(string rawUrl)
        {
            return new KiotaDemo.Clients.WeatherApi.Alerts.AlertsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns all alerts
        /// </summary>
        public class AlertsRequestBuilderGetQueryParameters 
        {
            /// <summary>List only active alerts (use /alerts/active endpoints instead)</summary>
            [Obsolete("")]
            [QueryParameter("active")]
            public bool? Active { get; set; }
            /// <summary>State/territory code or marine area codeThis parameter is incompatible with the following parameters: point, region, region_type, zone</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("area")]
            public string[]? Area { get; set; }
#nullable restore
#else
            [QueryParameter("area")]
            public string[] Area { get; set; }
#endif
            /// <summary>Certainty (observed, likely, possible, unlikely, unknown)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("certainty")]
            public KiotaDemo.Clients.WeatherApi.Models.AlertCertainty[]? Certainty { get; set; }
#nullable restore
#else
            [QueryParameter("certainty")]
            public KiotaDemo.Clients.WeatherApi.Models.AlertCertainty[] Certainty { get; set; }
#endif
            /// <summary>Event code</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("code")]
            public string[]? Code { get; set; }
#nullable restore
#else
            [QueryParameter("code")]
            public string[] Code { get; set; }
#endif
            /// <summary>Pagination cursor</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("cursor")]
            public string? Cursor { get; set; }
#nullable restore
#else
            [QueryParameter("cursor")]
            public string Cursor { get; set; }
#endif
            /// <summary>End time</summary>
            [QueryParameter("end")]
            public DateTimeOffset? End { get; set; }
            /// <summary>Event name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("event")]
            public string[]? Event { get; set; }
#nullable restore
#else
            [QueryParameter("event")]
            public string[] Event { get; set; }
#endif
            /// <summary>Limit</summary>
            [QueryParameter("limit")]
            public int? Limit { get; set; }
            /// <summary>Message type (alert, update, cancel)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("message_type")]
            public KiotaDemo.Clients.WeatherApi.Alerts.GetMessage_typeQueryParameterType[]? MessageType { get; set; }
#nullable restore
#else
            [QueryParameter("message_type")]
            public KiotaDemo.Clients.WeatherApi.Alerts.GetMessage_typeQueryParameterType[] MessageType { get; set; }
#endif
            /// <summary>Point (latitude,longitude)This parameter is incompatible with the following parameters: area, region, region_type, zone</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("point")]
            public string? Point { get; set; }
#nullable restore
#else
            [QueryParameter("point")]
            public string Point { get; set; }
#endif
            /// <summary>Marine region codeThis parameter is incompatible with the following parameters: area, point, region_type, zone</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("region")]
            public KiotaDemo.Clients.WeatherApi.Models.MarineRegionCode[]? Region { get; set; }
#nullable restore
#else
            [QueryParameter("region")]
            public KiotaDemo.Clients.WeatherApi.Models.MarineRegionCode[] Region { get; set; }
#endif
            /// <summary>Region type (land or marine)This parameter is incompatible with the following parameters: area, point, region, zone</summary>
            [QueryParameter("region_type")]
            public KiotaDemo.Clients.WeatherApi.Alerts.GetRegion_typeQueryParameterType? RegionType { get; set; }
            /// <summary>Severity (extreme, severe, moderate, minor, unknown)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("severity")]
            public KiotaDemo.Clients.WeatherApi.Models.AlertSeverity[]? Severity { get; set; }
#nullable restore
#else
            [QueryParameter("severity")]
            public KiotaDemo.Clients.WeatherApi.Models.AlertSeverity[] Severity { get; set; }
#endif
            /// <summary>Start time</summary>
            [QueryParameter("start")]
            public DateTimeOffset? Start { get; set; }
            /// <summary>Status (actual, exercise, system, test, draft)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("status")]
            public KiotaDemo.Clients.WeatherApi.Alerts.GetStatusQueryParameterType[]? Status { get; set; }
#nullable restore
#else
            [QueryParameter("status")]
            public KiotaDemo.Clients.WeatherApi.Alerts.GetStatusQueryParameterType[] Status { get; set; }
#endif
            /// <summary>Urgency (immediate, expected, future, past, unknown)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("urgency")]
            public KiotaDemo.Clients.WeatherApi.Models.AlertUrgency[]? Urgency { get; set; }
#nullable restore
#else
            [QueryParameter("urgency")]
            public KiotaDemo.Clients.WeatherApi.Models.AlertUrgency[] Urgency { get; set; }
#endif
            /// <summary>Zone ID (forecast or county)This parameter is incompatible with the following parameters: area, point, region, region_type</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("zone")]
            public string[]? Zone { get; set; }
#nullable restore
#else
            [QueryParameter("zone")]
            public string[] Zone { get; set; }
#endif
        }
    }
}
