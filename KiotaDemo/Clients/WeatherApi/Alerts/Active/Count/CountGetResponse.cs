// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace KiotaDemo.Clients.WeatherApi.Alerts.Active.Count
{
    #pragma warning disable CS1591
    public class CountGetResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Active alerts by area (state/territory)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public KiotaDemo.Clients.WeatherApi.Alerts.Active.Count.CountGetResponse_areas? Areas { get; set; }
#nullable restore
#else
        public KiotaDemo.Clients.WeatherApi.Alerts.Active.Count.CountGetResponse_areas Areas { get; set; }
#endif
        /// <summary>The total number of active alerts affecting land zones</summary>
        public int? Land { get; set; }
        /// <summary>The total number of active alerts affecting marine zones</summary>
        public int? Marine { get; set; }
        /// <summary>Active alerts by marine region</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public KiotaDemo.Clients.WeatherApi.Alerts.Active.Count.CountGetResponse_regions? Regions { get; set; }
#nullable restore
#else
        public KiotaDemo.Clients.WeatherApi.Alerts.Active.Count.CountGetResponse_regions Regions { get; set; }
#endif
        /// <summary>The total number of active alerts</summary>
        public int? Total { get; set; }
        /// <summary>Active alerts by NWS public zone or county code</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public KiotaDemo.Clients.WeatherApi.Alerts.Active.Count.CountGetResponse_zones? Zones { get; set; }
#nullable restore
#else
        public KiotaDemo.Clients.WeatherApi.Alerts.Active.Count.CountGetResponse_zones Zones { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="KiotaDemo.Clients.WeatherApi.Alerts.Active.Count.CountGetResponse"/> and sets the default values.
        /// </summary>
        public CountGetResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="KiotaDemo.Clients.WeatherApi.Alerts.Active.Count.CountGetResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static KiotaDemo.Clients.WeatherApi.Alerts.Active.Count.CountGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new KiotaDemo.Clients.WeatherApi.Alerts.Active.Count.CountGetResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "areas", n => { Areas = n.GetObjectValue<KiotaDemo.Clients.WeatherApi.Alerts.Active.Count.CountGetResponse_areas>(KiotaDemo.Clients.WeatherApi.Alerts.Active.Count.CountGetResponse_areas.CreateFromDiscriminatorValue); } },
                { "land", n => { Land = n.GetIntValue(); } },
                { "marine", n => { Marine = n.GetIntValue(); } },
                { "regions", n => { Regions = n.GetObjectValue<KiotaDemo.Clients.WeatherApi.Alerts.Active.Count.CountGetResponse_regions>(KiotaDemo.Clients.WeatherApi.Alerts.Active.Count.CountGetResponse_regions.CreateFromDiscriminatorValue); } },
                { "total", n => { Total = n.GetIntValue(); } },
                { "zones", n => { Zones = n.GetObjectValue<KiotaDemo.Clients.WeatherApi.Alerts.Active.Count.CountGetResponse_zones>(KiotaDemo.Clients.WeatherApi.Alerts.Active.Count.CountGetResponse_zones.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<KiotaDemo.Clients.WeatherApi.Alerts.Active.Count.CountGetResponse_areas>("areas", Areas);
            writer.WriteIntValue("land", Land);
            writer.WriteIntValue("marine", Marine);
            writer.WriteObjectValue<KiotaDemo.Clients.WeatherApi.Alerts.Active.Count.CountGetResponse_regions>("regions", Regions);
            writer.WriteIntValue("total", Total);
            writer.WriteObjectValue<KiotaDemo.Clients.WeatherApi.Alerts.Active.Count.CountGetResponse_zones>("zones", Zones);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
